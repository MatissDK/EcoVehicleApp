@model IEnumerable<Vidly.Models.Vehicle>

@{
	ViewBag.Title = "ActioShowPolygonInfo";
	Layout = "~/Views/Shared/_Layout.cshtml";
}


<h2>Overlapping</h2>

@using (Html.BeginForm("ShowPolygonInfo", "Home"))
{
	<div class="form-group">
		<input type="text" id="MyDate" name="date"/>
		<br/>
		<br/>
		<button type="submit" class="btn btn-primary">OK</button>
	</div>
}

<div id="map" style="width: 100%; height: 500px"></div>


@section scripts {

	<script>
        
		var map;
		function initMap() {

			map = new google.maps.Map(document.getElementById('map'), {
				zoom: 11,
				center: { lat: 58.3776, lng: 26.7290 },
				mapTypeId: 'terrain'
			});

			function getJsonData() {
				$.ajax({
					type: 'POST',
					url: '/Home/JsonForPolygons',
					dataType: 'json',
					success: function(myControllerJsonData) {
						handleData(myControllerJsonData);
					}
				});
			}

			getJsonData();

			function handleData(data) {
				var idKeys = [];

				$.each(data, function(i, item) {
					idKeys.push(item.ObjectId);
				});

				var uniqueObjectId = filterArrayDuplicates(idKeys);
				uniqueObjectId.forEach(function(value, index) {
					var curArray = tempVehicleData(data, uniqueObjectId, index);
					var curEst = createPolygonObject(curArray, randomColorGenerator());
					putPoligonOnMapAndListener(curEst);

				});
			}

		    //returs random color for handle createPolygonObject
			function randomColorGenerator() {
				var letters = '0123456789ABCDEF';
				var color = '#';
				for (var i = 0; i < 6; i++) {
					color += letters[Math.floor(Math.random() * 16)];
				}
				return color;
			}


			function tempVehicleData(data, uniqueObjectId, index) {
				var curVehicle = [];
				data.forEach(function(curValue) {
					if (curValue.ObjectId == uniqueObjectId[index]) {
						var coordinatesObject = { lat: curValue.latitude, lng: curValue.longitude };
						curVehicle.push(coordinatesObject);
					}
				});
				return curVehicle;
			}

			function filterArrayDuplicates(a) {
				var temp = {};
				for (var i = 0; i < a.length; i++)
					temp[a[i]] = true;
				return Object.keys(temp);
			}

			function createPolygonObject(data, color) {
				var polygonObject = new google.maps.Polygon({
					paths: data,
					strokeColor: '#000000',
					strokeOpacity: 0.8,
					strokeWeight: 2,
					fillColor: color,
					fillOpacity: 0.35
				});
				return polygonObject;
			}

			function putPoligonOnMapAndListener(polygonObject) {
				polygonObject.setMap(map);
				google.maps.event.addListener(polygonObject, 'click', function() {
					alert(convertToHectars(this));
				});
			}

			function convertToHectars(parameter) {
				var hectaresOut = google.maps.geometry.spherical.computeArea(parameter.getPath()) * 0.001;
				var roundedHectares = Math.round(hectaresOut);
				return 'Area is ' + roundedHectares + ' hectares large';
			}


		}

		//setting date picker 
		$(document).ready(function() {
			$('#MyDate').datepicker();
		});
	</script>
}

<br>
<br>

@if (!Model.Any())
{
	<h1>Sorry, can't connect to server</h1>
}
else
{
	<table class="table table-bordered table-hover">
		<thead id="tableHead">
		 
		</thead>
		<tbody id="tableBody">

		</tbody>
	</table>
}


