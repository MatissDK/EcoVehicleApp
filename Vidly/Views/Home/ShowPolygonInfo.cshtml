@model IEnumerable<Vidly.Models.Vehicle>

@{
	ViewBag.Title = "ActioShowPolygonInfo";
	Layout = "~/Views/Shared/_Layout.cshtml";
}


<h2>Overlapping</h2>

@using (Html.BeginForm("ShowPolygonInfo", "Home"))
{
	<div class="form-group">
		<input type="text" id="MyDate" name="date"/>
		<br/>
		<br/>
		<button type="submit" class="btn btn-primary">OK</button>
	</div>
}

<div id="map" style="width: 100%; height: 500px"></div>


@section scripts {

	<script>
		
		var uniqueObejctId = [];
		var map;

		function initMap() {

			map = new google.maps.Map(document.getElementById('map'), {
				zoom: 11,
				center: { lat: 58.3776, lng: 26.7290 },
				mapTypeId: 'terrain'
			});

			function getJsonData() {
				$.ajax({
					type: 'POST',
					url: '/Home/JsonForPolygons',
					dataType: 'json',
					success: function(myControllerJsonData) {
						handleData(myControllerJsonData);
					}
				});
			}

			getJsonData();

			function handleData(data) {

				var vehicle1041 = [];
				var vehicle1949 = [];
				var vehicle969 = [];

				//getting unique IdValues
				var idKeys = [];
				$.each(data, function(i, item) {
					idKeys.push(item.ObjectId);
				});

				function arrNoDupe(a) {
					var temp = {};
					for (var i = 0; i < a.length; i++)
						temp[a[i]] = true;
					return Object.keys(temp);
				}

				uniqueObejctId = arrNoDupe(idKeys);
			  

			    $.each(data, function (i, item) {
			        if (item.ObjectId == uniqueObejctId[0]) {
			            vehicle1041.push({ lat: item.latitude, lng: item.longitude });
			        } else if (item.ObjectId == uniqueObejctId[1]) {
			            vehicle1949.push({ lat: item.latitude, lng: item.longitude });
			        } else if (item.ObjectId == uniqueObejctId[2]) {
			            vehicle969.push({ lat: item.latitude, lng: item.longitude });
			        }

			    });


				var est1 = createPolygonObject(vehicle1041, '#ffff00');
				var est2 = createPolygonObject(vehicle1949, '#b30000');
				var est3 = createPolygonObject(vehicle969, '#0066ff');

				putPoligonOnMapAndListener(est1);
				putPoligonOnMapAndListener(est2);
				putPoligonOnMapAndListener(est3);

				areas.push(google.maps.geometry.spherical.computeArea(est1.getPath()) * 0.001);
				areas.push(google.maps.geometry.spherical.computeArea(est2.getPath()) * 0.001);
				areas.push(google.maps.geometry.spherical.computeArea(est3.getPath()) * 0.001);

				function createPolygonObject(data, color) {
					var polygonObject = new google.maps.Polygon({
						paths: data,
						strokeColor: '#000000',
						strokeOpacity: 0.8,
						strokeWeight: 2,
						fillColor: color,
						fillOpacity: 0.35
					});
					return polygonObject;
				}

				function putPoligonOnMapAndListener(polygonObejct) {
					polygonObejct.setMap(map);
					google.maps.event.addListener(polygonObejct, 'click', function() {
						alert(convertToHectars(this));
					});
				}

				function convertToHectars(parameter) {
					var hectaresOut = google.maps.geometry.spherical.computeArea(parameter.getPath()) * 0.001;
					var roundedHectares = Math.round(hectaresOut);
					return 'Area is ' + roundedHectares + ' hectares large';
				}

			}

		}

		//setting date picker 
		$(document).ready(function() {
			$('#MyDate').datepicker();
		});
	</script>
}

<br>
<br>

@if (!Model.Any())
{
	<h1>Sorry, can't connect to server</h1>
}
else
{
	<table class="table table-bordered table-hover">
		<thead id="tableHead">
		 
		</thead>
		<tbody id="tableBody">

		</tbody>
	</table>
}


