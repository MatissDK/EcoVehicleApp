@model IEnumerable<Vidly.Models.Vehicle>
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Vehicles Overlaping</h2>

<!-- This is the div that will contain the Google Map -->
<div id="map" style="width: 100%; height: 500px"></div>

<!-- Enclose the Javascript in a "section" so that it is rendered in the correct order after scripts have been loaded etc -->

@section scripts {

    @*    // This example creates a simple polygon representing the Bermuda Triangle.*@
    <script>
        function initMap() {
            var map = new google.maps.Map(document.getElementById('map'), {
                zoom: 11,
                center: { lat: 58.3776, lng: 26.7290 },
                mapTypeId: 'terrain'
            });

            function getJsonData() {
                $.ajax({
                    type: 'POST',
                    url: '/Vehicles/GetJsonDataData',
                    dataType: 'json',
                    success: function(myControllerJsonData) {
                        handleData(myControllerJsonData);                     
                    }
                });
            }

            getJsonData();

            function handleData(data) {

                var vehicle1041 = [];
                var vehicle1949 = [];
                var vehicle969 = [];

                $.each(data, function(i, item) {
                    if (item.objectName === 'https://apps.oskando.ee/seeme/Api/Vehicles/' +
                        'getRawData?objectId=1041&begTimestamp=2013-02-01&endTimestamp=2013-02-02&key=proovitoo1') {
                        vehicle1041.push({ lat: item.latitude, lng: item.longitude });
                    } else if (item.objectName === 'https://apps.oskando.ee/seeme/Api/Vehicles/' +
                        'getRawData?objectId=1949&begTimestamp=2013-02-01&endTimestamp=2013-02-02&key=proovitoo1') {
                        vehicle1949.push({ lat: item.latitude, lng: item.longitude });
                    } else if (item.objectName === 'https://apps.oskando.ee/seeme/Api/Vehicles/' +
                        'getRawData?objectId=969&begTimestamp=2013-02-01&endTimestamp=2013-02-02&key=proovitoo1') {
                        vehicle969.push({ lat: item.latitude, lng: item.longitude });
                    }

                });
        
                //vehicle_1041 - yellow polygon 
                var est1 = new google.maps.Polygon({
                    paths: vehicle1041,
                    strokeColor: '#000000',
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: '#ffff00',
                    fillOpacity: 0.35
                });

                //vehicle_1949 - red polygon 
                var est2 = new google.maps.Polygon({
                    paths: vehicle1949,
                    strokeColor: '#b30000',
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: '#b30000',
                    fillOpacity: 0.35
                });

                //vehicle_969 - blue polygon  
                var est3 = new google.maps.Polygon({
                    paths: vehicle969,
                    strokeColor: '#0066ff',
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: '#0066ff',
                    fillOpacity: 0.35
                });


                // put in some information about each json object - in this case, the opening hours.
                var infowindow = new google.maps.InfoWindow({
                    content: "<div class='infoDiv'><h2>" + "Numberplate: " + 'lol' + "\n"
                        + "Address: " + 'aass' + "</div></div>"
                });

                est1.setMap(map);
                est2.setMap(map);
                est3.setMap(map);

                google.maps.event.addListener(est1, 'click', function () {
                    alert(convertToHectars(this));
                });
                google.maps.event.addListener(est2, 'click', function () {
                    alert(convertToHectars(this));
                });
                google.maps.event.addListener(est3, 'click', function () {
                    alert(convertToHectars(this));
                });
         
                function convertToHectars(parameter) {
                    var lol = google.maps.geometry.spherical.computeArea(parameter.getPath()) * 0.001;
                    var roundedValue = Math.round(lol);
                    return 'Area is '+ roundedValue + ' ha large';
                }
            }
            //ends handleData function
        }

    </script>
}

<br>
<br>
@if (!Model.Any())
{
    <h1>Sorry, can't connect to server</h1>
}
else
{
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th>Object Name</th>
                <th>Latitude</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>klllll</td>
                <td>18292.00ha</td>
            </tr>
        </tbody>
    </table>
}






